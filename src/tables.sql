-- Drop existing tables if needed
DROP TABLE IF EXISTS user_tokens CASCADE;
DROP TABLE IF EXISTS tokens CASCADE;
DROP TABLE IF EXISTS profiles CASCADE;
DROP TABLE IF EXISTS companies CASCADE;
DROP TABLE IF EXISTS role_permissions CASCADE;
DROP TABLE IF EXISTS roles CASCADE; -- Updated to drop the roles table

-- Custom types
CREATE TYPE public.app_permission AS ENUM (
    'tokens.insert',
    'tokens.select',
    'tokens.update',
    'tokens.delete',
    'profiles.select',
    'user_tokens.select.company',
    'user_tokens.update.company',
    'user_tokens.delete.company',
    'user_tokens.insert.company',
    'roles.select.company'
);

-- Table for roles
CREATE TABLE roles (
    id SERIAL PRIMARY KEY,             -- Primary key for the roles table
    role_name TEXT NOT NULL UNIQUE,    -- Unique name for the role
    display_name TEXT NOT NULL          -- Human-readable name for the role
);

-- Insert human-readable names for roles
INSERT INTO roles (role_name, display_name) VALUES
('admin', 'Administrator'),
('moderator', 'Moderator');

CREATE INDEX idx_role_name ON roles(role_name);

-- Table for companies
CREATE TABLE companies (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name TEXT NOT NULL
);

-- Table for profiles
CREATE TABLE profiles (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID REFERENCES auth.users ON DELETE CASCADE NOT NULL,  -- Supabase Auth User ID
    company_id UUID REFERENCES companies(id) ON DELETE CASCADE,     -- Link to company
    role_id INTEGER DEFAULT 2 REFERENCES roles(id) ON DELETE SET NULL,  -- Set default role_id to 1
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    display_name TEXT CHECK (char_length(display_name) <= 128),
    email TEXT,
    UNIQUE (user_id)
);
CREATE INDEX idx_profiles_role_id ON profiles(role_id);  -- Index for roles in profiles


CREATE TABLE tokens (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    company_id UUID REFERENCES companies(id) ON DELETE CASCADE, -- Reference to companies
    access_token TEXT NOT NULL,
    refresh_token TEXT NOT NULL,
    expires_in INTEGER NOT NULL,
    token_type TEXT NOT NULL,
    name TEXT CHECK (char_length(name) <= 36), -- Optional column for the user's name with a max length of 36 characters
    email TEXT, -- Optional column for the user's email
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

    -- Ensure that the combination of email and company_id is unique
    CONSTRAINT unique_email_company UNIQUE (email, company_id)
);

-- ROLE PERMISSIONS
CREATE TABLE role_permissions (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    role_id INTEGER REFERENCES roles(id) ON DELETE CASCADE NOT NULL, -- Link to roles table
    permission app_permission NOT NULL,
    UNIQUE (role_id, permission)
);
COMMENT ON TABLE public.role_permissions IS 'Application permissions for each role.';

CREATE INDEX idx_role_permissions_role_id ON role_permissions(role_id);

-- Index to improve performance on foreign key lookups for tokens
CREATE INDEX idx_tokens_company_id ON tokens(company_id);

-- Table for user_tokens
DROP TABLE IF EXISTS user_tokens CASCADE;

CREATE TABLE user_tokens (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    profile_id SERIAL REFERENCES profiles(id) ON DELETE CASCADE, -- Reference to the profiles table's id
    token_id UUID REFERENCES tokens(id) ON DELETE CASCADE,       -- Reference to the tokens table
    CONSTRAINT unique_profile_token UNIQUE (profile_id, token_id)
);

-- Indexes to improve performance on foreign key lookups for user_tokens
CREATE INDEX idx_user_tokens_profile_id ON user_tokens(profile_id);
CREATE INDEX idx_user_tokens_token_id ON user_tokens(token_id);

-- Indexes for the users table
CREATE INDEX idx_users_company_id ON profiles(company_id);
